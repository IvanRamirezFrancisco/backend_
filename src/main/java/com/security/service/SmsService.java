package com.security.service;

import com.security.entity.User;
import com.security.entity.SmsVerificationCode;
import com.security.repository.SmsVerificationCodeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.ContentType;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.Optional;

@Service
@Transactional
public class SmsService {

    @Autowired
    private SmsVerificationCodeRepository smsVerificationCodeRepository;

    @Value("${app.notification.sms.project-id}")
    private String projectId;

    @Value("${app.notification.sms.access-key-id}")
    private String accessKeyId;

    @Value("${app.notification.sms.secret-key}")
    private String secretKey;

    @Value("${app.notification.sms.from-number}")
    private String fromNumber;

    @Value("${app.notification.sms.dev-mode:false}")
    private boolean devMode;

    private static final SecureRandom secureRandom = new SecureRandom();
    private static final String SINCH_SMS_URL = "https://sms.api.sinch.com/xms/v1/{project_id}/batches";

    @PostConstruct
    private void initialize() {
        System.out.println("üîß Sinch SMS Service inicializado");
        System.out.println("üì± Modo desarrollo: " + devMode);
        System.out.println("üìû N√∫mero origen: " + fromNumber);
    }

    /**
     * Env√≠a un c√≥digo de verificaci√≥n SMS al n√∫mero especificado
     */
    public void sendVerificationCode(User user, String phoneNumber) {
        try {
            // Generar c√≥digo de 6 d√≠gitos
            String code = generateSixDigitCode();

            // Guardar c√≥digo en base de datos
            SmsVerificationCode smsCode = new SmsVerificationCode();
            smsCode.setUser(user);
            smsCode.setPhone(phoneNumber);
            smsCode.setCode(code);
            smsCode.setExpiryDate(LocalDateTime.now().plusMinutes(5)); // 5 minutos de expiraci√≥n
            smsCode.setUsed(false);
            smsCode.setAttempts(0);

            // Limpiar c√≥digos anteriores no usados del mismo usuario y tel√©fono
            smsVerificationCodeRepository.deleteByUserAndPhoneAndUsedFalse(user, phoneNumber);

            // Guardar nuevo c√≥digo
            smsVerificationCodeRepository.save(smsCode);

            // Enviar SMS
            sendSms(phoneNumber, "Tu c√≥digo de verificaci√≥n es: " + code + ". V√°lido por 5 minutos.");

            System.out.println("‚úÖ C√≥digo SMS enviado a " + phoneNumber + " para usuario: " + user.getEmail());

        } catch (Exception e) {
            System.err.println("‚ùå Error enviando SMS: " + e.getMessage());
            throw new RuntimeException("Error al enviar c√≥digo SMS", e);
        }
    }

    /**
     * Env√≠a un c√≥digo de verificaci√≥n para el login 2FA
     */
    public void sendLoginVerificationCode(User user) {
        if (user.getPhone() == null || user.getPhone().trim().isEmpty()) {
            throw new RuntimeException("El usuario no tiene un n√∫mero de tel√©fono configurado");
        }

        sendVerificationCode(user, user.getPhone());
    }

    /**
     * Verifica un c√≥digo SMS
     */
    public boolean verifyCode(User user, String phone, String code) {
        Optional<SmsVerificationCode> smsCodeOpt = smsVerificationCodeRepository
                .findValidCode(code, phone, LocalDateTime.now());

        if (smsCodeOpt.isEmpty()) {
            return false;
        }

        SmsVerificationCode smsCode = smsCodeOpt.get();

        // Verificar que pertenece al usuario correcto
        if (!smsCode.getUser().getId().equals(user.getId())) {
            return false;
        }

        // Marcar como usado
        smsCode.setUsed(true);
        smsCode.setAttempts(smsCode.getAttempts() + 1);
        smsVerificationCodeRepository.save(smsCode);

        return true;
    }

    /**
     * Verifica c√≥digo para login 2FA usando el tel√©fono guardado del usuario
     */
    public boolean verifyLoginCode(User user, String code) {
        if (user.getPhone() == null || user.getPhone().trim().isEmpty()) {
            return false;
        }

        return verifyCode(user, user.getPhone(), code);
    }

    /**
     * Env√≠a SMS usando Twilio
     */
    private void sendSms(String toPhoneNumber, String messageBody) {
        // MODO DE DESARROLLO: Simular env√≠o SMS sin usar Twilio
        if (devMode) {
            System.out.println("üß™ [MODO DESARROLLO] SMS simulado a: " + toPhoneNumber);
            System.out.println("üß™ [MODO DESARROLLO] Mensaje: " + messageBody);
            System.out.println("üß™ [MODO DESARROLLO] ¬°SMS enviado exitosamente (simulado)!");
            return;
        }

        // MODO PRODUCCI√ìN: Usar Sinch
        try {
            sendSinchSms(toPhoneNumber, messageBody);
            System.out.println("üì± SMS enviado exitosamente via Sinch a: " + toPhoneNumber);

        } catch (Exception e) {
            System.err.println("‚ùå Error en Sinch: " + e.getMessage());
            throw new RuntimeException("Error enviando SMS: " + e.getMessage(), e);
        }
    }

    /**
     * Genera un c√≥digo de 6 d√≠gitos
     */
    private String generateSixDigitCode() {
        return String.format("%06d", secureRandom.nextInt(1000000));
    }

    /**
     * Limpia c√≥digos expirados
     */
    public void cleanupExpiredCodes() {
        smsVerificationCodeRepository.deleteExpiredCodes(LocalDateTime.now());
        System.out.println("üßπ C√≥digos SMS expirados eliminados");
    }

    /**
     * Valida formato de n√∫mero de tel√©fono
     */
    public boolean isValidPhoneNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {
            return false;
        }

        // Formato b√°sico: debe empezar con + y tener entre 10 y 15 d√≠gitos
        String cleanPhone = phoneNumber.trim().replaceAll("\\s+", "");
        return cleanPhone.matches("^\\+[1-9]\\d{9,14}$");
    }

    /**
     * Normaliza el formato del n√∫mero de tel√©fono
     */
    public String normalizePhoneNumber(String phoneNumber) {
        if (phoneNumber == null) {
            return null;
        }

        return phoneNumber.trim().replaceAll("\\s+", "");
    }

    /**
     * Env√≠a SMS usando Sinch REST API
     */
    private void sendSinchSms(String toPhoneNumber, String messageBody) throws Exception {
        String url = SINCH_SMS_URL.replace("{project_id}", projectId);

        // Debug informaci√≥n
        System.out.println("üîß Debug Sinch:");
        System.out.println("üìç URL: " + url);
        System.out.println("üÜî Project ID: " + projectId);
        System.out.println("üîë Access Key ID: " + accessKeyId);
        System.out.println("üìû From Number (original): " + fromNumber);
        System.out.println("üì± To Number: " + toPhoneNumber);

        // Asegurar que el n√∫mero "from" tenga el prefijo +
        String normalizedFromNumber = fromNumber.startsWith("+") ? fromNumber : "+" + fromNumber;
        System.out.println("üìû From Number (normalizado): " + normalizedFromNumber);

        // Crear el JSON body para Sinch
        String jsonBody = String.format("""
                {
                    "from": "%s",
                    "to": ["%s"],
                    "body": "%s"
                }
                """, normalizedFromNumber, toPhoneNumber, messageBody);

        System.out.println("üìÑ JSON Body: " + jsonBody);

        // Usar autenticaci√≥n Bearer con API Token (secret-key contiene el API Token)
        String apiToken = secretKey;

        System.out.println("üîê API Token: " + apiToken);
        System.out.println("üîê Auth Header: Bearer " + apiToken);

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost httpPost = new HttpPost(url);

            // Headers con Bearer Authentication
            httpPost.setHeader("Authorization", "Bearer " + apiToken);
            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setHeader("Accept", "application/json");

            // Body
            httpPost.setEntity(new StringEntity(jsonBody, ContentType.APPLICATION_JSON));

            // Ejecutar request
            CloseableHttpResponse response = httpClient.execute(httpPost);
            try {
                int statusCode = response.getCode();

                if (statusCode >= 200 && statusCode < 300) {
                    System.out.println("‚úÖ SMS enviado exitosamente via Sinch");
                    System.out.println("üì± Status: " + statusCode);
                } else {
                    String responseBody = "";
                    if (response.getEntity() != null) {
                        responseBody = new String(response.getEntity().getContent().readAllBytes());
                    }
                    System.err.println("‚ùå Error Sinch - Status: " + statusCode);
                    System.err.println("‚ùå Response: " + responseBody);
                    throw new RuntimeException("Sinch API error: " + statusCode + " - " + responseBody);
                }
            } finally {
                response.close();
            }
        }
    }
}